[agent]
  hostname = "telegraf"
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logtarget = "stderr"
  logfile = ""
  logfile_rotation_interval = "0d"
  logfile_rotation_max_size = "0MB"
  logfile_rotation_max_archives = 5

[global_tags]
  site = "observatory"

###############################################################################
#                            DATA COLLECTION                                  #
###############################################################################

# Collect system metrics (CPU, memory, disk, network)
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

[[inputs.diskio]]

[[inputs.mem]]

[[inputs.net]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

# Collect Docker metrics
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_names = []
  source_tag = false
  container_name_include = []
  container_name_exclude = []
  timeout = "5s"
  perdevice = true
  total = false
  docker_label_include = []
  docker_label_exclude = []

# Collect Prometheus metrics
[[inputs.prometheus]]
  urls = ["http://prometheus:9090/metrics"]
  metric_version = 2

# Collect Loki metrics
[[inputs.prometheus]]
  urls = ["http://loki:3001/metrics"]
  metric_version = 2
  [inputs.prometheus.tags]
    service = "loki"

# Collect Grafana metrics
[[inputs.prometheus]]
  urls = ["http://grafana:3000/metrics"]
  metric_version = 2
  [inputs.prometheus.tags]
    service = "grafana"

# Collect Alertmanager metrics
[[inputs.prometheus]]
  urls = ["http://alertmanager:9093/metrics"]
  metric_version = 2
  [inputs.prometheus.tags]
    service = "alertmanager"

# Collect Nautobot metrics
[[inputs.prometheus]]
  urls = ["http://nautobot:8080/metrics"]
  metric_version = 2
  [inputs.prometheus.tags]
    service = "nautobot"

# Collect HTTP response metrics
[[inputs.http_response]]
  urls = [
    "http://prometheus:9090",
    "http://grafana:3000",
    "http://alertmanager:9093",
    "http://loki:3001",
    "http://nautobot:8080"
  ]
  response_timeout = "5s"
  method = "GET"
  follow_redirects = true

###############################################################################
#                            DATA OUTPUT                                      #
###############################################################################

# Output to Prometheus
[[outputs.prometheus_client]]
  listen = ":9004"
  metric_version = 2
  path = "/metrics"
  export_timestamp = true

# Output to file for debugging
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"