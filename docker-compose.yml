version: "3.8"

services:
  # --- Nautobot for Network Automation ---
  nautobot:
    image: networktocode/nautobot:latest
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 1G
    volumes:
      - ./config/nautobot_config.py:/opt/nautobot/nautobot_config.py
      - ./config/nautobot_plugin.yml:/opt/nautobot/plugins.yml
    environment:
      - NAUTOBOT_DB_HOST=nautobot-db
      - NAUTOBOT_DB_PORT=5432
      - NAUTOBOT_DB_NAME=nautobot
      - NAUTOBOT_DB_USER=nautobot
      - NAUTOBOT_DB_PASSWORD=nautobot
    ports:
      - "8001:8000"
    depends_on:
      - nautobot-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - monitoring

  nautobot-db:
    image: postgres:14
    environment:
      - POSTGRES_DB=nautobot
      - POSTGRES_USER=nautobot
      - POSTGRES_PASSWORD=nautobot
    volumes:
      - nautobot-db-data:/var/lib/postgresql/data
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "nautobot"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

  # --- Prometheus for Metrics Collection ---
  prometheus:
    image: prom/prometheus:latest
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus-alerts.yml:/etc/prometheus/prometheus-alerts.yml
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

  # --- Alertmanager ---
  alertmanager:
    image: prom/alertmanager:latest
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    ports:
      - "9094:9093"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

  # --- Node Exporter for Host Metrics ---
  node-exporter:
    image: prom/node-exporter:latest
    command:
      - "--path.rootfs=/host"
    volumes:
      - /:/host:ro,rslave
    ports:
      - "9101:9100"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

  # --- Loki for Log Aggregation ---
  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/loki-config.yml
    volumes:
      - ./config/loki-config.yml:/etc/loki/loki-config.yml
      - loki-data:/loki
    ports:
      - "3101:3100"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

  # --- Logstash for Log Collection ---
  logstash:
    image: docker.elastic.co/logstash/logstash:7.16.2
    volumes:
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "514:514/udp"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    depends_on:
      - loki
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "localhost:9600/_node/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring

  # --- Grafana for Visualization ---
  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./config/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./dashboards/network:/etc/grafana/dashboards/network
      - ./dashboards/system:/etc/grafana/dashboards/system
      - ./dashboards/logs:/etc/grafana/dashboards/logs
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

networks:
  monitoring:
    driver: overlay

volumes:
  nautobot-db-data:
    driver: local
  prometheus-data:
    driver: local
  loki-data:
    driver: local
  grafana-data:
    driver: local